// generated by cdktf get
// terraform-google-modules/container-vm/google
import { TerraformModule, TerraformModuleUserConfig } from 'cdktf';
import { Construct } from 'constructs';
export interface GoogleContainerVmConfig extends TerraformModuleUserConfig {
  /**
   * A description of the container to deploy
   * @default [object Object]
   */
  readonly container?: any;
  /**
   * The COS image family to use (eg: stable, beta, or dev)
   * @default stable
   */
  readonly cosImageFamily?: string;
  /**
   * Name of a specific COS image to use instead of the latest cos family image
   */
  readonly cosImageName?: string;
  /**
   * COS project where the image is located
   * @default cos-cloud
   */
  readonly cosProject?: string;
  /**
   * The restart policy for a Docker container. Defaults to `OnFailure`
   * @default OnFailure
   */
  readonly restartPolicy?: string;
  /**
   * A set of Docker Volumes to configure
   * @default 
   */
  readonly volumes?: any;
}
export class GoogleContainerVm extends TerraformModule {
  private readonly inputs: { [name: string]: any } = { }
  public constructor(scope: Construct, id: string, config: GoogleContainerVmConfig = {}) {
    super(scope, id, {
      ...config,
      source: 'terraform-google-modules/container-vm/google',
      version: '3.1.0',
    });
    this.container = config.container;
    this.cosImageFamily = config.cosImageFamily;
    this.cosImageName = config.cosImageName;
    this.cosProject = config.cosProject;
    this.restartPolicy = config.restartPolicy;
    this.volumes = config.volumes;
  }
  public get container(): any | undefined {
    return this.inputs['container'] as any | undefined;
  }
  public set container(value: any | undefined) {
    this.inputs['container'] = value;
  }
  public get cosImageFamily(): string | undefined {
    return this.inputs['cos_image_family'] as string | undefined;
  }
  public set cosImageFamily(value: string | undefined) {
    this.inputs['cos_image_family'] = value;
  }
  public get cosImageName(): string | undefined {
    return this.inputs['cos_image_name'] as string | undefined;
  }
  public set cosImageName(value: string | undefined) {
    this.inputs['cos_image_name'] = value;
  }
  public get cosProject(): string | undefined {
    return this.inputs['cos_project'] as string | undefined;
  }
  public set cosProject(value: string | undefined) {
    this.inputs['cos_project'] = value;
  }
  public get restartPolicy(): string | undefined {
    return this.inputs['restart_policy'] as string | undefined;
  }
  public set restartPolicy(value: string | undefined) {
    this.inputs['restart_policy'] = value;
  }
  public get volumes(): any | undefined {
    return this.inputs['volumes'] as any | undefined;
  }
  public set volumes(value: any | undefined) {
    this.inputs['volumes'] = value;
  }
  public get containerOutput() {
    return this.getString('container')
  }
  public get containerVmOutput() {
    return this.getString('container_vm')
  }
  public get metadataKeyOutput() {
    return this.getString('metadata_key')
  }
  public get metadataValueOutput() {
    return this.getString('metadata_value')
  }
  public get restartPolicyOutput() {
    return this.getString('restart_policy')
  }
  public get sourceImageOutput() {
    return this.getString('source_image')
  }
  public get vmContainerLabelOutput() {
    return this.getString('vm_container_label')
  }
  public get vmContainerLabelKeyOutput() {
    return this.getString('vm_container_label_key')
  }
  public get volumesOutput() {
    return this.getString('volumes')
  }
  protected synthesizeAttributes() {
    return this.inputs;
  }
}
